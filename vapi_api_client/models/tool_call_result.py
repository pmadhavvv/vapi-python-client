from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.tool_message_complete import ToolMessageComplete
    from ..models.tool_message_failed import ToolMessageFailed


T = TypeVar("T", bound="ToolCallResult")


@_attrs_define
class ToolCallResult:
    """
    Attributes:
        name (str): This is the name of the function the model called.
        tool_call_id (str): This is the unique identifier for the tool call.
        message (Union[Unset, list[Union['ToolMessageComplete', 'ToolMessageFailed']]]): This is the message that will
            be spoken to the user.

            If this is not returned, assistant will speak:
            1. a `request-complete` or `request-failed` message from `tool.messages`, if it exists
            2. a response generated by the model, if not
        result (Union[Unset, str]): This is the result if the tool call was successful. This is added to the
            conversation history.

            Further, if this is returned, assistant will speak:
            1. the `message`, if it exists and is of type `request-complete`
            2. a `request-complete` message from `tool.messages`, if it exists
            3. a response generated by the model, if neither exist
        error (Union[Unset, str]): This is the error if the tool call was not successful. This is added to the
            conversation history.

            Further, if this is returned, assistant will speak:
            1. the `message`, if it exists and is of type `request-failed`
            2. a `request-failed` message from `tool.messages`, if it exists
            3. a response generated by the model, if neither exist
    """

    name: str
    tool_call_id: str
    message: Union[Unset, list[Union["ToolMessageComplete", "ToolMessageFailed"]]] = UNSET
    result: Union[Unset, str] = UNSET
    error: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        from ..models.tool_message_complete import ToolMessageComplete

        name = self.name

        tool_call_id = self.tool_call_id

        message: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.message, Unset):
            message = []
            for message_item_data in self.message:
                message_item: dict[str, Any]
                if isinstance(message_item_data, ToolMessageComplete):
                    message_item = message_item_data.to_dict()
                else:
                    message_item = message_item_data.to_dict()

                message.append(message_item)

        result = self.result

        error = self.error

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "name": name,
                "toolCallId": tool_call_id,
            }
        )
        if message is not UNSET:
            field_dict["message"] = message
        if result is not UNSET:
            field_dict["result"] = result
        if error is not UNSET:
            field_dict["error"] = error

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.tool_message_complete import ToolMessageComplete
        from ..models.tool_message_failed import ToolMessageFailed

        d = dict(src_dict)
        name = d.pop("name")

        tool_call_id = d.pop("toolCallId")

        message = []
        _message = d.pop("message", UNSET)
        for message_item_data in _message or []:

            def _parse_message_item(data: object) -> Union["ToolMessageComplete", "ToolMessageFailed"]:
                try:
                    if not isinstance(data, dict):
                        raise TypeError()
                    message_item_type_0 = ToolMessageComplete.from_dict(data)

                    return message_item_type_0
                except:  # noqa: E722
                    pass
                if not isinstance(data, dict):
                    raise TypeError()
                message_item_type_1 = ToolMessageFailed.from_dict(data)

                return message_item_type_1

            message_item = _parse_message_item(message_item_data)

            message.append(message_item)

        result = d.pop("result", UNSET)

        error = d.pop("error", UNSET)

        tool_call_result = cls(
            name=name,
            tool_call_id=tool_call_id,
            message=message,
            result=result,
            error=error,
        )

        tool_call_result.additional_properties = d
        return tool_call_result

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
